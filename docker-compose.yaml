  services:

    server:
      build:
        context: .
        dockerfile: ./API/API.Dockerfile
      restart: always
      networks:
        - app-network
      volumes:
        - ./API:/app
        - ./db:/app/db
        - ./config.py:/app/config.py
        - ./schemas:/app/schemas
      env_file: .env
      ports:
        - 8000:8000
      depends_on:
        db: 
          condition: service_healthy

    bot:
      build:
        context: .
        dockerfile: ./bot/bot.Dockerfile
      restart: always
      networks:
        - app-network
      volumes:
        - ./bot:/app
        - ./db:/app/db
        - ./config.py:/app/config.py
        - ./schemas:/app/schemas
      env_file: .env
      depends_on:
        db: 
          condition: service_healthy

    db:
      image: postgres:15
      restart: always
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      ports:
        - "${POSTGRES_OUTER_PORT}:${POSTGRES_INNER_PORT}"
      networks:
        - app-network
      volumes:
        - ./db/init:/docker-entrypoint-initdb.d:ro
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
        interval: 10s
        timeout: 5s
        retries: 5

    # ngrok:
    #   image: ngrok/ngrok:latest
    #   command: 
    #     - "http"
    #     - "--url=dane-peaceful-formally.ngrok-free.app"
    #     - "server:8000"
    #   environment:
    #     NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    #   ports:
    #     - 4040:4040
    #   networks:
    #       - app-network

  networks:
    app-network:
      driver: bridge
      